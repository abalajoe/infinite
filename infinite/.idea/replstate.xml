<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420727947825">{:repl-history {:ide [], :local [&quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (nth rows 1)))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (nth rows 0)))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (:count(*) (nth rows 0))))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (val (nth rows 0))))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (vals (nth rows 0))))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (into [] (vals (nth rows 0)))))\n      (recur (- x 1))))))&quot; &quot;(def try (atom []))&quot; &quot;@try&quot; &quot;(swap! conj try 1)&quot; &quot;(swap! try conj 1)&quot; &quot;(swap! try conj 2)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (swap! henessy conj (vals (nth rows 0)))))\n      (recur (- x 1))))))&quot; &quot;(ns model.db\n  (:import (java.sql SQLException))\n  (:require [clojure.java.jdbc :as sql])\n  (:require [clojure.tools.logging :as log])\n  (:require [clojure.java.io :as io])\n  (:require [util.utils :as utl]))&quot; &quot;(def db\n  \&quot;Database configurations\&quot;\n  (let [classname (utl/get-configuration :classname)\n        subprotocol (utl/get-configuration :subprotocol)\n        subname (utl/get-configuration :subname)\n        user (utl/get-configuration :user)\n        password (utl/get-configuration :password)]\n    {:classname classname\n     :subprotocol subprotocol\n     :subname subname\n     :user user\n     :password password}))&quot; &quot;(def hennessy (atom []))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0)))))\n      (recur (- x 1))))))&quot; &quot;(def try2 (list 5))&quot; &quot;try2&quot; &quot;(get try2 0)&quot; &quot;(get try2 1)&quot; &quot;(nth try2 0)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (nth (vals (nth rows 0)) 0))\n      )\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0)) )\n      )\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      hennessy))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (dec 1)\n      ))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (dec x)\n      ))))&quot; &quot;(def try3 8)&quot; &quot;(dec 8)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))hennessy)&quot; &quot;(reset! hennessy [])&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! henessy [])\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! hennessy [])\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(def vodka [11 21 31 41 51 61 71])&quot; &quot;vodka&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! hennessy [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(get-henessy)&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(db/get-henessy)&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n            [layout.help :as help]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns live.analysis\n  (:import\n    (org.jfree.chart ChartFactory ChartFrame)\n    (org.jfree.chart.plot PlotOrientation)\n    (org.jfree.data.general DefaultPieDataset))\n  (:require [live.db :as db]\n            [model.db :as db]))&quot; &quot;(ns live.analysis\n  (:import\n    (org.jfree.chart ChartFactory ChartFrame)\n    (org.jfree.chart.plot PlotOrientation)\n    (org.jfree.data.general DefaultPieDataset))\n  (:require [model.db :as db]))&quot; &quot;(defn pie\n  \&quot;Create a single pie chart from a sequence of category-value pairs.\n   Each category-value pair should itself be a sequence.\n   e.g. =&gt; (pie \\\&quot;This is the Title\\\&quot; '((\\\&quot;Emacs\\\&quot; 20) (\\\&quot;Vi\\\&quot; 15) (\\\&quot;Eclipse\\\&quot; 30)))\&quot;\n  ([title pairs]\n    (ChartFactory/createPieChart\n      title (pie-dataset pairs) *legend* *tooltips* *urls*))\n  #_{:test (fn []\n           (let [test-chart (pie \&quot;Test Title\&quot; '((\&quot;Emacs\&quot; 20) (\&quot;Vi\&quot; 15) (\&quot;Eclipse\&quot; 30)))]\n             (instance? JFreeChart test-chart)))})&quot; &quot;(ns layout.analysis\n  (:import\n    (org.jfree.chart ChartFactory ChartFrame)\n    (org.jfree.chart.plot PlotOrientation)\n    (org.jfree.data.general DefaultPieDataset)\n    (javax.swing JTextArea JDialog)\n    (java.awt GridBagLayout Insets))\n  (:require [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(new ChartFrame \&quot;Inventory Pie Chart\&quot;\n             (pie \&quot;LIQUOR\&quot; (db/liquor-names)))&quot; &quot;(defn help-dialog [data-ref]\n  ; cleate dialog with text area\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                            (pie \&quot;LIQUOR\&quot; (db/liquor-names))))]\n    (doto dialog\n      ; set dialog layout\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        id-label)\n      (.setSize 500 200)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                            (pie \&quot;LIQUOR\&quot; (db/liquor-names))))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (pie \&quot;LIQUOR\&quot; (db/liquor-names))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (pie \&quot;LIQUOR\&quot; (db/liquor-names)))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                                                         (pie \&quot;LIQUOR\&quot; (db/liquor-names))))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                                                         (pie \&quot;LIQUOR\&quot; (db/liquor-names))))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true )]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.pack)\n      (.setLocationRelativeTo (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n                                   (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(ns layout.analysis\n  (:import\n    (org.jfree.chart ChartFactory ChartFrame)\n    (org.jfree.chart.plot PlotOrientation)\n    (org.jfree.data.general DefaultPieDataset)\n    (javax.swing JTextArea JDialog)\n    (java.awt GridBagLayout Insets GridLayout))\n  (:require [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(pie \&quot;hey\&quot; (db/liquor-brand))&quot; &quot;(defn liquor-piechart\n  \&quot;Function displays inventory pie chart for liquors\&quot;\n  []\n  (doto (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n             (pie \&quot;LIQUOR\&quot; (db/liquor-names)))\n    (.pack)\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;(defn brand-piechart\n  \&quot;Function displays inventory pie chart for liquor brands\&quot;\n  []\n  (doto (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n             (pie \&quot;LIQUOR BRANDS\&quot; (db/liquor-brand)))\n    (.pack)\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;(defn size-piechart\n  \&quot;Function displays inventory pie chart for liquor brands\&quot;\n  []\n  (doto (new ChartFrame \&quot;Inventory Pie Chart\&quot;\n             (pie \&quot;LIQUO SIZES \&quot; (db/liquor-size)))\n    (.pack)\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true )]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.pack)\n      (.setLocationRelativeTo liquor-piechart)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn liquor-piechart\n  \&quot;Function displays inventory pie chart for liquors\&quot;\n  []\n  (doto (new ChartPanel \&quot;Inventory Pie Chart\&quot;\n             (pie \&quot;LIQUOR\&quot; (db/liquor-names)))\n    (.pack)\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;liquor-piechart&quot; &quot;(ns layout.analysis\n  (:import\n    (org.jfree.chart ChartFactory ChartFrame ChartPanel)\n    (org.jfree.chart.plot PlotOrientation)\n    (org.jfree.data.general DefaultPieDataset)\n    (javax.swing JTextArea JDialog)\n    (java.awt GridBagLayout Insets GridLayout))\n  (:require [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(defn liquor-piechart\n  \&quot;Function displays inventory pie chart for liquors\&quot;\n  []\n  (doto (new ChartPanel\n             (pie \&quot;LIQUOR\&quot; (db/liquor-names)))\n    (.pack)\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;(defn liquor-piechart\n  \&quot;Function displays inventory pie chart for liquors\&quot;\n  []\n  (doto (new ChartPanel\n             (pie \&quot;LIQUOR\&quot; (db/liquor-names)))\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;(liquor-piechart)&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true )]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add liquor-piechart)\n      (.pack)\n      (.setLocationRelativeTo liquor-piechart)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true )\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.pack)\n      (.setLocationRelativeTo liquor-piechart)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true )\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn liquor-piechart\n  \&quot;Function displays inventory pie chart for liquors\&quot;\n  []\n  (doto (new ChartPanel\n             (pie \&quot;LIQUOR\&quot; (db/liquor-names)))))&quot; &quot;(ns layout.help\n  (:import (javax.swing JDialog  JTextArea)\n           (java.awt GridBagLayout Insets))\n  (:require [clojure.tools.logging :as log]\n            [util.utils :as utl]))&quot; &quot;(def about-app \&quot;This is an Inventory management software solutions\nthat keeps track of inventory, sales and purchasing\&quot;)&quot; &quot;(defn help-dialog [data-ref]\n  ; cleate dialog with text area\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        about-label (doto (new JTextArea about-app 0 0)\n                   (.setEditable false)\n                   (.setLineWrap false)\n                   (.setWrapStyleWord true))]\n    (doto dialog\n      ; set dialog layout\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        about-label)\n      (.setSize 500 200)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn dialog-string [owner]\n  (help-dialog (ref {:owner owner})))&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JPanel JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener)\n           (java.awt GridBagLayout Insets)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]\n            [infinite.main :as main]))&quot; &quot;(ns layout.analysis\n  (:import\n    (org.jfree.chart ChartFactory ChartFrame ChartPanel)\n    (org.jfree.chart.plot PlotOrientation)\n    (org.jfree.data.general DefaultPieDataset)\n    (javax.swing JTextArea JDialog JLabel)\n    (java.awt GridBagLayout Insets GridLayout))\n  (:require [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(def ^:dynamic *legend* true)&quot; &quot;(def ^:dynamic *tooltips* true)&quot; &quot;(def ^:dynamic *orientation* PlotOrientation/VERTICAL)&quot; &quot;(def ^:dynamic *urls* true)&quot; &quot;(defn- pie-dataset\n  \&quot;Internal function to convert from a sequence of pairs into a pie chart dataset\&quot;\n  ([data]\n    (let [pds (new DefaultPieDataset)]\n      (doseq [i data] (.setValue pds (first i) (second i)))\n      pds)))&quot; &quot;(defn pie\n  \&quot;Create a single pie chart from a sequence of category-value pairs.\n   Each category-value pair should itself be a sequence.\n   e.g. =&gt; (pie \\\&quot;This is the Title\\\&quot; '((\\\&quot;Emacs\\\&quot; 20) (\\\&quot;Vi\\\&quot; 15) (\\\&quot;Eclipse\\\&quot; 30)))\&quot;\n  ([title pairs]\n    (ChartFactory/createPieChart\n      title (pie-dataset pairs) *legend* *tooltips* *urls*)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 200 200)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 200 500)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 800 500)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 800 800)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 800 800)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 500 500)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.add (new ChartPanel\n                 (pie \&quot;LIQUOR\&quot; (db/liquor-names))))\n      (.setSize 600 600)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn dialog-string [owner]\n  (admin-dialog (ref {:owner owner})))&quot; &quot;(defn admin-dialog [data-ref title]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.add (new ChartPanel\n                 (pie title (db/liquor-names))))\n      (.setSize 600 600)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn dialog-string [owner]\n  (admin-dialog \&quot;liquor\&quot; (ref {:owner owner})))&quot; &quot;(defn dialog-string [owner]\n  (admin-dialog (ref {:owner owner}) \&quot;liquor\&quot;))&quot; &quot;(defn dialog-string [owner]\n  (admin-dialog (ref {:owner owner}) \&quot;liquor\&quot; (db/liquor-names)))&quot; &quot;(dialog-string nil)&quot; &quot;(defn admin-dialog [data-ref title product]\n  (let [dialog (new JDialog (@data-ref :owner) true)]\n    (doto dialog\n      (.add (new ChartPanel\n                 (pie title product)))\n      (.setSize 600 600)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn dialog-string [owner title product]\n  (admin-dialog (ref {:owner owner}) title product))&quot; &quot;(dialog-string nil \&quot;liqour\&quot; (db/liquor-size))&quot;], :remote []}}</component>
</project>

