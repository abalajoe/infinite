<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1421758917944">{:repl-history {:ide [], :local [&quot;(defn get-type []\n  (reset! user-type-atom [])\n  (sql/with-connection db\n   (sql/with-query-results rs [\&quot;select type from tbl_login_test\&quot;]\n    (doall rs))))&quot; &quot;(get-type)&quot; &quot;(defn login-test [^String username ^String password ^String type]\n  (sql/with-connection db\n     (sql/with-query-results rs [\&quot;select * from tbl_login_test where username=? and password=? and type=?\&quot; username password type]\n       (dorun (map #(println %) rs))\n         (count rs))))&quot; &quot;(login-test \&quot;user\&quot; \&quot;user\&quot; \&quot;user\&quot;)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! hennessy [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Vodka'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(get-henessy)&quot; &quot;(defn get-vodka []\n  \&quot;Function display system admin\&quot;\n  (reset! vodka [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Vodka'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@vodka)&quot; &quot;(defn get-vodka []\n  \&quot;Function display system admin\&quot;\n  (reset! vodka [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Vodka'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! vodka conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@vodka)&quot; &quot;(get-vodka)&quot; &quot;(defn get-whisky-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! whisky [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Whisky'\&quot; x)]      ; execute query\n      (doall rows )\n      (println x \&quot;-\&quot; (swap! whisky conj(nth (vals (nth rows 0)) 0))))\n       (recur (- x 1))\n        )))@whisky)&quot; &quot;(get-whisky-line-chart)&quot; &quot;(defn get-brandy-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! brandy [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Whisky'\&quot; x)]      ; execute query\n      (doall rows )\n       (println x \&quot;-\&quot; (swap! brandy conj(nth (vals (nth rows 0)) 0))))\n       (recur (- x 1))\n       )))@brandy)&quot; &quot;(defn get-brandy-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! brandy [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Brandy'\&quot; x)]      ; execute query\n      (doall rows )\n       (println x \&quot;-\&quot; (swap! brandy conj(nth (vals (nth rows 0)) 0))))\n       (recur (- x 1))\n       )))@brandy)&quot; &quot;(get-brandy-line-chart)&quot; &quot;(defn get-gin-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! gin [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n   (when (&gt; x 0)\n    (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Gin'\&quot; x)]      ; execute query\n     (doall rows )\n     (println x \&quot;-\&quot; (swap! gin conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@gin)&quot; &quot;(get-gin-line-chart)&quot; &quot;(defn get-beer-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! beer [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Beer'\&quot; x)]      ; execute query\n      (doall rows )\n       (println x \&quot;-\&quot; (swap! beer conj(nth (vals (nth rows 0)) 0))))\n        (recur (- x 1))\n        )))@beer)&quot; &quot;(get-beer-line-chart)&quot; &quot;(defn get-beverage-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! beverage [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Beverage'\&quot; x)]      ; execute query\n      (doall rows )\n       (println x \&quot;-\&quot; (swap! beverage conj(nth (vals (nth rows 0)) 0))))\n       (recur (- x 1))\n        )))@beverage)&quot; &quot;(get-beverage-line-chart)&quot; &quot;(def vodka (atom []))&quot; &quot;(def whisky (atom []))&quot; &quot;(def gin (atom []))&quot; &quot;(def brandy (atom []))&quot; &quot;(def beer (atom []))&quot; &quot;(def beverage (atom []))&quot; &quot;(defn get-vodka-line-chart []\n  \&quot;Function display system admin\&quot;\n  (reset! vodka [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales join tbl_prod on tbl_sales.product=tbl_prod.name where dayofweek(date_added)=%d and brand='Vodka'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! vodka conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@vodka)&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JPanel JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener)\n           (java.awt GridBagLayout Insets)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]\n            [infinite.main :as main]))&quot; &quot;(def login-frame)&quot; &quot;(def username (atom \&quot;\&quot;))&quot; &quot;(def username-label (new JLabel \&quot;Username\&quot;))&quot; &quot;(def password-label (new JLabel \&quot;Password\&quot;))&quot; &quot;(def user-type-label (new JLabel \&quot;User\&quot;))&quot; &quot;(def username-field (doto (new JTextField)(.setColumns 25)))&quot; &quot;(def password-field (doto (new JTextField)(.setColumns 25)))&quot; &quot;(def login-button (doto (new JButton \&quot;Login\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(def cancel-button (doto (new JButton \&quot;Cancel\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(def exit-button (doto (new JButton \&quot;Exit\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(def user-type-combo (doto (new JComboBox (java.util.Vector. (db/get-user-type)))(.setPreferredSize (new Dimension 250 20))))&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JComboBox JLabel JPanel JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener)\n           (java.awt GridBagLayout Insets)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]\n            [infinite.main :as main]))&quot; &quot;(defn get-liqours []\n  (reset! liquor-atom [])\n  (sql/with-connection db\n   (sql/with-query-results rs [\&quot;select name from tbl_liquor\&quot;]\n    #_(dorun\n    #_ (map #(println %)rs))\n    ;(println (:name(second rs)))\n    (loop [x (count rs)]\n     (when (not (= x 0))\n       ; (println  \&quot;main -&gt; \&quot; (:name(nth rs (- x 1))))\n      (swap! liquor-atom conj (:name(nth rs (- x 1))))\n      (recur (dec x))))\n       (count rs)\n        @liquor-atom )))&quot; &quot;(defn get-liqours []\n  (reset! liquor-atom [])\n  (sql/with-connection db\n   (sql/with-query-results rs [\&quot;select name from tbl_prod\&quot;]\n    #_(dorun\n    #_ (map #(println %)rs))\n    ;(println (:name(second rs)))\n    (loop [x (count rs)]\n     (when (not (= x 0))\n       ; (println  \&quot;main -&gt; \&quot; (:name(nth rs (- x 1))))\n      (swap! liquor-atom conj (:name(nth rs (- x 1))))\n      (recur (dec x))))\n       (count rs)\n        @liquor-atom )))&quot; &quot;(get-liqours)&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane JPasswordField)\n           (javax.swing JFrame JComboBox JLabel JPanel JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener)\n           (java.awt GridBagLayout Insets)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]\n            [infinite.main :as main]))&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane JPasswordField)\n           (javax.swing JFrame JComboBox JLabel JPanel JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener)\n           (java.awt GridBagLayout Insets)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]\n            ;[infinite.main :as main]\n            ))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n           ; [layout.admin :as admin]\n            ;[layout.sales :as sales]\n           ; [layout.help :as help]\n           ; [layout.analysis :as analysis]\n           ; [util.utils :as utl]\n           ; [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n           ; [layout.admin :as admin]\n            ;[layout.sales :as sales]\n           ; [layout.help :as help]\n           ; [layout.analysis :as analysis]\n           ; [util.utils :as utl]\n            [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n           ; [layout.admin :as admin]\n            ;[layout.sales :as sales]\n           ; [layout.help :as help]\n           ; [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n           ; [layout.admin :as admin]\n            ;[layout.sales :as sales]\n           ; [layout.help :as help]\n           [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n           ; [layout.admin :as admin]\n            ;[layout.sales :as sales]\n           [layout.help :as help]\n           [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n           ; [layout.admin :as admin]\n            [layout.sales :as sales]\n          ; [layout.help :as help]\n           [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n          ; [layout.help :as help]\n           [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db]\n           )\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane JPasswordField)\n           (javax.swing JFrame JComboBox JLabel JPanel JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener)\n           (java.awt GridBagLayout Insets)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]\n            [infinite.main :as main]\n            ))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n            [layout.help :as help]\n            [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(def db\n  \&quot;Database configurations\&quot;\n  (let [classname (utl/get-configuration :classname)\n        subprotocol (utl/get-configuration :subprotocol)\n        subname (utl/get-configuration :subname)\n        user (utl/get-configuration :user)\n        password (utl/get-configuration :password)]\n    {:classname classname\n     :subprotocol subprotocol\n     :subname subname\n     :user user\n     :password password}))&quot; &quot;(defn login-test []\n  (sql/with-connection db\n   (sql/with-query-results rs [\&quot;select * from tbl_login_test\&quot;]\n    (doall rs))))&quot; &quot;(login-test)&quot; &quot;(apply + (keys {:joe 33 :japeth 29 :mary 44}))&quot; &quot;(keys {:joe 33 :japeth 29 :mary 44})&quot; &quot;(apply + (vals {:joe 33 :japeth 29 :mary 44}))&quot; &quot;(ns layout.reports\n  (:require  [model.db :as db]\n             [clj-pdf.core :as pdf]))&quot; &quot;(db/login-test-pdf)&quot; &quot;(into [] (db/login-test-pdf))&quot; &quot;admin-report-data&quot; &quot;(defn generate-pdf\n  [title template data report &amp; headers]\n  (pdf/pdf\n    [{:header title}\n     (into [:table\n            {:border true\n             :cell-border false\n             :header [{:color [0 150 150]} headers]}]\n           (template data))]\n    report))&quot; &quot;(generate-pdf \&quot;emp list\&quot; admin-template admin-report-data \&quot;report.pdf\&quot; \&quot;ID\&quot; \&quot;Username\&quot; \&quot;Password\&quot; \&quot;Type\&quot;)&quot; &quot;(generate-pdf \&quot;emp list\&quot; admin-template admin-report-data \&quot;report.pdf\&quot; \&quot;ID\&quot; \&quot;User\&quot; \&quot;Password\&quot; \&quot;Type\&quot;)&quot; &quot;(def login-frame\n  (doto (JFrame. \&quot;INFINITE INVENTORY SYSTEM\&quot;)\n    ; set login panel to frame\n    (.setContentPane login-panel)\n    ; set size of frame\n    (.setSize 800 300)\n    ; make frame visible\n    (.setVisible true)\n    ; position frame at center of screen\n    (.setLocationRelativeTo nil)))&quot; &quot;(ns layout.reports\n  (:require  [model.db :as db]                               ; db\n             [clojure.tools.logging :as log]                 ; log\n             [clj-pdf.core :as pdf]))&quot; &quot;(def admin-report-data  (into [] (db/login-test-pdf)))&quot; &quot;(def admin-template\n  (pdf/template [(.toString $id) $username $password $type]))&quot; &quot;(def inventory-report-data  (into [] (db/list-inventory)))&quot; &quot;(def inventory-template\n  (pdf/template [(.toString $id) $liquor $brand $size (.toString $quantity) (.toString $price) $date]))&quot; &quot;(def sales-report-data  (into [] (db/list-sales)))&quot; &quot;(def sales-template\n  (pdf/template [(.toString $id) $product $size $date_added]))&quot; &quot;(defn generate-pdf\n  [title template data report &amp; headers]\n  (try\n    (pdf/pdf\n      [{:header title}\n       (into [:table\n              {:border true\n               :cell-border false\n               :header [{:color [0 150 150]} headers]}]\n             (template data))]\n      report)\n    (catch Exception e\n      (log/error (.getMessage e)))))&quot; &quot;(if (generate-pdf \&quot;emp list\&quot; admin-template admin-report-data \&quot;r.pdf\&quot; \&quot;ID\&quot; \&quot;User\&quot; \&quot;Password\&quot; \&quot;Type\&quot;)1 0)&quot; &quot;(if (== nil (generate-pdf \&quot;emp list\&quot; admin-template admin-report-data \&quot;r.pdf\&quot; \&quot;ID\&quot; \&quot;User\&quot; \&quot;Password\&quot; \&quot;Type\&quot;))1 0)&quot; &quot;(if (= nil (generate-pdf \&quot;emp list\&quot; admin-template admin-report-data \&quot;r.pdf\&quot; \&quot;ID\&quot; \&quot;User\&quot; \&quot;Password\&quot; \&quot;Type\&quot;))1 0)&quot; &quot;(generate-pdf \&quot;emp list\&quot; admin-template admin-report-data \&quot;r.pdf\&quot; \&quot;ID\&quot; \&quot;User\&quot; \&quot;Password\&quot; \&quot;Type\&quot;)&quot; &quot;(reports/generate-pdf\n                               \&quot;Administrator List\&quot;\n                               reports/admin-template\n                               reports/admin-report-data\n                               \&quot;E:\\\\infinitereports\\\\admin.pdf\&quot;\n                               \&quot;ID\&quot; \&quot;USERNAME\&quot; \&quot;PASSWORD\&quot; \&quot;TYPE\&quot;)&quot; &quot;(reports/generate-pdf\n                               \&quot;Sales List\&quot;\n                               reports/sales-template\n                               reports/sales-report-data\n                               \&quot;E:\\\\infinitereports\\\\sales.pdf\&quot;\n                               \&quot;ID\&quot; \&quot;PRODUCT\&quot; \&quot;SIZE\&quot; \&quot;DATE ADDED\&quot;)&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel JOptionPane)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n          ;  [layout.help :as help]\n            [layout.reports :as reports]\n            [layout.analysis :as analysis]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(reports/generate-pdf\n                               \&quot;Sales List\&quot;\n                               reports/sales-template\n                               reports/sales-report-data\n                               \&quot;E:\\\\infinitereports\\\\sales.pdf\&quot;\n                               \&quot;ID\&quot; \&quot;PRODUCT\&quot; \&quot;SIZE\&quot; \&quot;DATE ADkDED\&quot;)&quot; &quot;(ns util.utils\n  (:import (javax.swing JOptionPane JTable SwingUtilities JFrame JPanel JScrollPane JDialog)\n           (javax.swing.table AbstractTableModel)\n           (java.awt GridLayout Dimension)\n           (java.awt.event MouseAdapter)\n           (org.jfree.chart ChartPanel ChartFactory)\n           (org.jfree.chart.plot PlotOrientation)\n           (org.jfree.data.general DefaultPieDataset))\n  (:require [clojure.java.io :as io])\n  (:require [clojure.string :as str])\n  (:require [clojure.tools.logging :as log])\n  (:require [propertea.core :as propertea])\n  )&quot; &quot;(def config \&quot;E:\\\\infinite\\\\infinite\\\\src\\\\conf.properties\&quot;)&quot; &quot;(def props (propertea/read-properties config))&quot; &quot;props&quot; &quot;(def conf \&quot;E:\\\\infinite\\\\infinite\\\\src\\\\config.properties\&quot;)&quot; &quot;(defn- load-config\n  \&quot;Function loads configuration file\&quot;\n  [filename]\n  (with-open [r (io/reader filename)]\n    (read (java.io.PushbackReader. r))))&quot; &quot;(defn get-configuration\n  \&quot;Function gets configuration\&quot;\n  [key]\n  ((load-config conf)key))&quot; &quot;(defn get-properties\n  \&quot;Function gets props\&quot;\n  [key]\n  (propertea/read-properties config)key)&quot; &quot;((propertea/read-properties config):fname)&quot; &quot;(defn get-properties\n  \&quot;Function gets props\&quot;\n  [key]\n  ((propertea/read-properties config)key))&quot; &quot;(get-properties :fname)&quot; &quot;(ns model.db\n  (:import (java.sql SQLException))\n  (:require [clojure.java.jdbc :as sql])\n  (:require [clojure.tools.logging :as log])\n  (:require [clojure.java.io :as io])\n  (:require [util.utils :as utl]))&quot; &quot;(utl/get-configuration :classname)&quot; &quot;(utl/get-configuration :subprotocol)&quot; &quot;(utl/get-configuration :subname)&quot; &quot;(utl/get-configuration :user)&quot; &quot;(utl/get-configuration :password)&quot;], :remote []}}</component>
</project>

