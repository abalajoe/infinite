<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1419441546968">{:repl-history {:ide [], :local [&quot;(defn list-admin []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [\&quot;select * from login\&quot;]      ; execute query\n    (log/info rows )rows)))&quot; &quot;(list-admin)&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField JButton JOptionPane)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]))&quot; &quot;(def username-label (new JLabel \&quot;username\&quot;))&quot; &quot;(def password-label (new JLabel \&quot;password\&quot;))&quot; &quot;(def username-field (doto (new JTextField)(.setColumns 5)))&quot; &quot;(def password-field (new JTextField))&quot; &quot;(def login-button (new JButton \&quot;Login\&quot;))&quot; &quot;(def change-password-button (new JButton \&quot;Password\&quot;))&quot; &quot;(def exit-button (new JButton \&quot;Exit\&quot;))&quot; &quot;(def combox\n  (let [combobox (JComboBox. (java.util.Vector. ['a 'b 'c]))]\n    (.addItemListener combobox\n                      (proxy [ItemListener] []\n                        (itemStateChanged [item-event]\n                          (println (str \&quot;selection changed to \&quot;\n                                        (.getSelectedItem combobox))))))))&quot; &quot;(def combo-values [\&quot;joe\&quot; \&quot;abala\&quot;])&quot; &quot;(. login-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Login Button Pressed\&quot;)\n       ; get username and password entered by user\n       (let [username (. username-field (getText)) password (. password-field (getText))]\n         ; check if the user enters all fields\n         (if (or (empty? username)(empty? password))\n           (JOptionPane/showMessageDialog\n             nil \&quot;Please enter all details!\&quot; \&quot;Enter all Fields\&quot;\n             JOptionPane/INFORMATION_MESSAGE)\n           (do\n             ; check if the credentials are correct\n             (if (= (db/login username password ) 1)\n               (do\n                 ; close current jframe\n                 (.dispose frame)\n                 ; open main frame\n                 ; (mn/call-frame)\n                 (log/info \&quot;success\&quot;)\n                 )\n               (do (log/info \&quot;credentials incorrect!!\&quot;)\n                   (JOptionPane/showMessageDialog\n                     nil \&quot;Incorrect Credentials!\&quot; \&quot;Login usuccessful\&quot;\n                     JOptionPane/ERROR_MESSAGE)))))))))&quot; &quot;(-main)&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridBagLayout Insets GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]))&quot; &quot;(defmacro set-grid! [constraints field value]\n  `(set! (. ~constraints ~(symbol (name field)))\n         ~(if (keyword? value)\n            `(. java.awt.GridBagConstraints\n                ~(symbol (name value)))\n            value)))&quot; &quot;(defmacro grid-bag-layout [container &amp; body]\n  (let [c (gensym \&quot;c\&quot;)\n        cntr (gensym \&quot;cntr\&quot;)]\n    `(let [~c (new java.awt.GridBagConstraints)\n           ~cntr ~container]\n       ~@(loop [result '() body body]\n           (if (empty? body)\n             (reverse result)\n             (let [expr (first body)]\n               (if (keyword? expr)\n                 (recur (cons `(set-grid! ~c ~expr\n                                          ~(second body))\n                              result)\n                        (next (next body)))\n                 (recur (cons `(.add ~cntr ~expr ~c)\n                              result)\n                        (next body)))))))))&quot; &quot;(. login-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Login Button Pressed\&quot;)\n       ; get username and password entered by user\n       (let [username\n\n             (. username-field (getText)) password (. password-field (getText))]\n         ; check if the user enters all fields\n         (if (or (empty? username)(empty? password))\n           (JOptionPane/showMessageDialog\n             nil \&quot;Please enter all details!\&quot; \&quot;Enter all Fields\&quot;\n             JOptionPane/INFORMATION_MESSAGE)\n           (do\n             ; check if the credentials are correct\n             (if (= (db/login username password ) 1)\n               (do\n                 ; close current jframe\n                 (.dispose frame)\n                 ; open main frame\n                 ; (mn/call-frame)\n                 (log/info \&quot;success\&quot;)\n                 )\n               (do (log/info \&quot;credentials incorrect!!\&quot;)\n                   (JOptionPane/showMessageDialog\n                     nil \&quot;Incorrect Credentials!\&quot; \&quot;Login usuccessful\&quot;\n                     JOptionPane/ERROR_MESSAGE)))))))))&quot; &quot;(. cancel-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Cancel Button Pressed\&quot;)\n       (. username-field (.setText \&quot;\&quot;))\n       )))&quot; &quot;(def panel\n  (doto (JPanel. (GridBagLayout.))\n    (.setBorder(BorderFactory/createTitledBorder \&quot;Login\&quot;))\n    (grid-bag-layout\n      :fill :BOTH, :insets (Insets. 5 1 1 5)\n      :gridx 0, :gridy 0, :anchor :LINE_START\n      username-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 0,:anchor :LINE_END\n      username-field\n      :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n      :gridx 0, :gridy 1, :anchor :LINE_START\n      password-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 1,:anchor :LINE_END\n      password-field\n      :gridx 1, :gridy 2\n      login-button\n      :gridx 1, :gridy 3\n      cancel-button\n      :gridx 1, :gridy 4\n      exit-button)))&quot; &quot;(def frame\n  (doto (JFrame. \&quot;INFINITE INVENTORY SYSTEM\&quot;)\n    (.setContentPane panel)\n    (.setSize 800 300)\n    (.setVisible true)\n    (.setLocationRelativeTo nil)))&quot; &quot;(. cancel-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Cancel Button Pressed\&quot;)\n       )))&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridBagLayout Insets GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(def frame)&quot; &quot;(def login-button (doto (new JButton \&quot;Login\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(. login-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Login Button Pressed\&quot;)\n       ; get username and password entered by user\n       (let [username (. username-field (getText))\n             password (. password-field (getText))]\n         ; check if the user enters all fields\n         (if (or (empty? username)(empty? password))\n           (JOptionPane/showMessageDialog\n             nil \&quot;Please enter all details!\&quot; \&quot;Enter all Fields\&quot;\n             JOptionPane/INFORMATION_MESSAGE)\n           (do\n             ; check if the credentials are correct\n             (if (= (db/login username password ) 1)\n               (do\n                 ; close current jframe\n                 (.dispose frame)\n                 ; open main frame\n                 ; (mn/call-frame)\n                 (log/info \&quot;success\&quot;)\n                 )\n               (do (log/info \&quot;credentials incorrect!!\&quot;)\n                   (JOptionPane/showMessageDialog\n                     nil \&quot;Incorrect Credentials!\&quot; \&quot;Login usuccessful\&quot;\n                     JOptionPane/ERROR_MESSAGE)))))))))&quot; &quot;(. cancel-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Cancel Button Pressed\&quot;))))&quot; &quot;(. exit-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Exit Button Pressed\&quot;)\n       ; terminate application\n       (System/exit 0))))&quot; &quot;(def login-panel\n  ; use gridbaglayout as layout engine\n  (doto (JPanel. (GridBagLayout.))\n    ; set title for panel\n    (.setBorder(BorderFactory/createTitledBorder \&quot;Login\&quot;))\n    ; style the components\n    (utl/grid-bag-layout\n      :fill :BOTH, :insets (Insets. 5 1 1 5)\n      :gridx 0, :gridy 0, :anchor :LINE_START\n      username-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 0,:anchor :LINE_END\n      username-field\n      :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n      :gridx 0, :gridy 1, :anchor :LINE_START\n      password-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 1,:anchor :LINE_END\n      password-field\n      :gridx 1, :gridy 2\n      login-button\n      :gridx 1, :gridy 3\n      cancel-button\n      :gridx 1, :gridy 4\n      exit-button)))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JLabel JPanel JTextField JButton JMenu JMenuBar JMenuItem)\n           (java.awt.event ActionListener)\n           (java.awt GridLayout)\n           (java.awt Dimension)\n           (javax.swing.table AbstractTableModel))\n  ;(:require [live.sales :as sls])\n  ;(:require [live.tables :as tbl])\n  ;(:require [live.panels :as pnl])\n  ;(:require [live.piechart :as chart])\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]))&quot; &quot;(def main-frame)&quot; &quot;(def menuBar\n  (doto (JMenuBar.)\n    (.add (doto (JMenu. \&quot;File\&quot;)\n            (.add\n              (doto\n                (JMenuItem. \&quot;Admin\&quot;)\n                ))\n            (.add\n              (doto\n                (JMenuItem. \&quot;Inventory\&quot;)\n                ))\n            (.add (JMenuItem. \&quot;Suppliers\&quot;))\n            (.add (JMenuItem. \&quot;Expenditure\&quot;))\n            (.add (JMenuItem. \&quot;Budget\&quot;))\n            (.add (JMenuItem. \&quot;Graphs\&quot;))\n            (.add (JMenuItem. \&quot;Reports\&quot;))))\n    (.add (doto (JMenu. \&quot;Edit\&quot;)\n            (.add\n              (doto (JMenu. \&quot;Admin\&quot;)\n                (.add (doto (JMenuItem. \&quot;Add Admin\&quot;)\n                        (.addActionListener\n                          (proxy [ActionListener] []\n                            (actionPerformed [e]\n                              (println \&quot;Add Admin\&quot;)\n                              ;(pnl/admin-frame)\n                              )))))\n                (.add (doto (JMenuItem. \&quot;Edit Admin\&quot;)\n                        (.addActionListener\n                          (proxy [ActionListener] []\n                            (actionPerformed [e]\n                              (println \&quot;Edit Admin\&quot;)\n                              ; (pnl/admin-frame)\n                              )))))\n                (.add (doto (JMenuItem. \&quot;Show Admin\&quot;)\n                        (.addActionListener\n                          (proxy [ActionListener] []\n                            (actionPerformed [e]\n                              (log/info \&quot;Show Admin\&quot;)\n                              ; (tbl/model)\n                              ;(tbl/admin-table)\n                              )))))))\n            (.add\n              (doto\n                (new JMenu \&quot;Inventory\&quot;)\n                (.add\n                  (doto\n                    (new JMenuItem \&quot;Add Inventory\&quot;)\n                    (.addActionListener\n                      (proxy [ActionListener] []\n                        (actionPerformed [e]\n                          (log/info \&quot;Add Inventory\&quot;)\n                          ;(pnl/inventory-frame)\n                          )))))\n                (.add\n                  (doto\n                    (new JMenuItem \&quot;Display Inventory\&quot;)\n                    (.addActionListener\n                      (proxy [ActionListener] []\n                        (actionPerformed [e]\n                          (log/info \&quot;Display Inventory\&quot;)\n                          ;(tbl/inventory-table)\n                          )))))\n                (.add\n                  (doto\n                    (new JMenu \&quot;Inventory Analysis\&quot;)\n                    (.add\n                      (doto\n                        (new JMenuItem \&quot;Liquor\&quot;)\n                        (.addActionListener\n                          (proxy [ActionListener] []\n                            (actionPerformed [e]\n                              (log/info \&quot;Liquor analysis\&quot;)\n                              ;(chart/liquor-piechart)\n                              )))))\n                    (.add\n                      (doto\n                        (new JMenuItem \&quot;Brand\&quot;)\n                        (.addActionListener\n                          (proxy [ActionListener] []\n                            (actionPerformed [e]\n                              (log/info \&quot;Brand analysis\&quot;)\n                              ; (chart/brand-piechart)\n                              )))))\n                    (.add\n                      (doto\n                        (new JMenuItem \&quot;Size\&quot;)\n                        (.addActionListener\n                          (proxy [ActionListener] []\n                            (actionPerformed [e]\n                              (log/info \&quot;Size analysis\&quot;)\n                              ; (chart/size-piechart)\n                              )))))))))\n            (.add\n              (doto\n                (new JMenu \&quot;Sales\&quot;)\n                (.add\n                  (doto\n                    (new JMenuItem \&quot;Record Sales\&quot;)\n                    (.addActionListener\n                      (proxy [ActionListener] []\n                        (actionPerformed [e]\n                          (log/info \&quot;Sales\&quot;)\n                          ; (pnl/sales-frame)\n                          )))\n                    (.addActionListener\n                      (proxy [ActionListener] []\n                        (actionPerformed [e]\n                          (log/info \&quot;Sales\&quot;)\n                          ;(pnl/sales-frame)\n                          )))))\n                (.add\n                  (doto\n                    (new JMenuItem \&quot;Display Sales\&quot;)))))))))&quot; &quot;(defn call-frame []\n  (println \&quot;call frame triggered....\&quot;)\n  ;; main frame\n  (def main-frame\n    (doto\n      (new JFrame \&quot;Main Frame\&quot;)\n      (.setDefaultCloseOperation JFrame/HIDE_ON_CLOSE)\n      (.setJMenuBar menuBar)\n      (.setVisible true)\n      (.setSize 800 300)\n      (.setLocationRelativeTo nil))))&quot; &quot;(defn call-frame []\n  (println \&quot;call frame triggered....\&quot;)\n  ;; main frame\n  (def main-frame\n    (doto\n      (new JFrame \&quot;Main Frame\&quot;)\n      (.setDefaultCloseOperation JFrame/HIDE_ON_CLOSE)\n      (.setJMenuBar menuBar)\n      (.setVisible true)\n      (.setSize 1000 400)\n      (.setLocationRelativeTo nil))))&quot; &quot;(call-frame)&quot; &quot;(ns layout.admin\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField JButton JOptionPane BorderFactory)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridBagLayout Insets GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(def username-label (new JLabel \&quot;Username\&quot;))&quot; &quot;(def password-label (new JLabel \&quot;Password\&quot;))&quot; &quot;(def cofirm-password-label (new JLabel \&quot;Confirm Password\&quot;))&quot; &quot;(def username-field (doto (new JTextField)(.setColumns 25)))&quot; &quot;(def password-field (doto (new JTextField)(.setColumns 25)))&quot; &quot;(def confirm-password-field (doto (new JTextField)(.setColumns 25)))&quot; &quot;(def add-button (doto (new JButton \&quot;Add\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(def cancel-button (doto (new JButton \&quot;Cancel\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(def exit-button (doto (new JButton \&quot;Exit\&quot;)(.setPreferredSize (new Dimension 70 20))))&quot; &quot;(def confirm-password-label (new JLabel \&quot;Confirm Password\&quot;))&quot; &quot;(def admin-panel\n  ; use gridbaglayout as layout engine\n  (doto (JPanel. (GridBagLayout.))\n    ; set title for panel\n    (.setBorder(BorderFactory/createTitledBorder \&quot;Add Admin\&quot;))\n    ; style the components\n    (utl/grid-bag-layout\n      :fill :BOTH, :insets (Insets. 5 1 1 5)\n      :gridx 0, :gridy 0, :anchor :LINE_START\n      username-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 0,:anchor :LINE_END\n      username-field\n      :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n      :gridx 0, :gridy 1, :anchor :LINE_START\n      password-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 1,:anchor :LINE_END\n      password-field\n      :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n      :gridx 0, :gridy 2, :anchor :LINE_START\n      confirm-password-label\n      :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n      :gridx 1, :gridy 2,:anchor :LINE_END\n      confirm-password-field\n      :gridx 1, :gridy 3\n      add-button\n      :gridx 1, :gridy 4\n      cancel-button\n      :gridx 1, :gridy 5\n      exit-button)))&quot; &quot;(def admin-frame\n  (doto (JFrame. \&quot;INFINITE INVENTORY SYSTEM\&quot;)\n    ; set login panel to frame\n    (.setContentPane admin-panel)\n    ; set size of frame\n    (.setSize 800 300)\n    ; make frame visible\n    (.setVisible true)\n    ; position frame at center of screen\n    (.setLocationRelativeTo nil)))&quot; &quot;(def one 5)&quot; &quot;(def two 6)&quot; &quot;(def three 5)&quot; &quot;(= two one)&quot; &quot;(= one three)&quot; &quot;(equals one three)&quot; &quot;(defn insert-admin [username password]\n  \&quot;Function inserts admin to db\&quot;\n  (let [sql \&quot;insert into inventoryapp.login (username,password) values (? , ? )\&quot;]\n    (sql/with-connection db\n      (sql/do-prepared sql [username password]))))&quot; &quot;(defn insert-admin [username password]\n  \&quot;Function inserts admin to db\&quot;\n  (let [sql \&quot;insert into inventoryapp.tbl_login (username,password,date_added) values (? , ? , NOW())\&quot;]\n    (sql/with-connection db\n      (sql/do-prepared sql [username password]))))&quot; &quot;(defn insert-admin \n  \&quot;Function inserts admin to db\&quot;\n  [username password]\n  (try\n    (let [sql \&quot;insert into inventoryapp.tbl_login (username,password,date_added) values (? , ? , NOW())\&quot;]\n      (sql/with-connection db\n        (sql/do-prepared sql [username password])))\n    (catch SQLException sql\n      (log/error \&quot;insert admin SQLE &gt;&gt; \&quot; (.getMessage sql)))\n    (catch Exception e\n      (log/error \&quot;insert admin E &gt;&gt; \&quot; (.getMessage e)))))&quot; &quot;(insert-admin \&quot;joe\&quot; \&quot;jwizzy\&quot;)&quot; &quot;(list 1)&quot; &quot;(ns layout.admin\n  (:import (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField \n                        JButton JOptionPane BorderFactory AbstractAction\n                        JOptionPane JScrollPane SwingUtilities)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridBagLayout Insets GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(ns layout.admin\n  (:import (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField\n                        JButton JOptionPane BorderFactory AbstractAction\n                        JOptionPane JScrollPane SwingUtilities)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridBagLayout Insets GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        c-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 15)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :password)))\n        c-password-field (doto (new JTextField)\n                           (.setColumns 15))\n        update-btn (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText c-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText c-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-btn (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))]\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.add id-field)\n      (.add username-label)\n      (.add username-field)\n      (.add password-label)\n      (.add password-field)\n      (.add c-password-label)\n      (.add c-password-field)\n      (.add update-btn)\n      (.add delete-btn)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(.addMouseListener utl/table\n                   (proxy [MouseAdapter] []\n                     (mouseClicked [e]\n                       (when (== (.getClickCount e) 1)\n                         (let [coordinates (.getPoint e)\n                               row-count (.rowAtPoint table coordinates)\n                               column-count (.columnAtPoint table coordinates)]\n                           (prn \&quot;click r &gt; \&quot; row-count)\n                           (prn \&quot;click c &gt; \&quot; column-count)\n                           (prn \&quot;ID &gt; \&quot; (:username(nth (db/list-admin)row-count)))\n                           (let [id (:id(nth (db/list-admin)row-count))\n                                 username (:username(nth (db/list-admin)row-count))\n                                 password (:password(nth (db/list-admin)row-count))]\n                             (dialog-string nil (str id) username password))\n                           (flush))))))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        c-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 15)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :password)))\n        c-password-field (doto (new JTextField)\n                           (.setColumns 15))\n        update-btn (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText c-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText c-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-btn (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))]\n    (doto dialog\n      (.setLayout (new GridBagLayout))\n      (.setBorder(BorderFactory/createTitledBorder \&quot;Add Admin\&quot;))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        username-field)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    #_(doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.add id-field)\n      (.add username-label)\n      (.add username-field)\n      (.add password-label)\n      (.add password-field)\n      (.add c-password-label)\n      (.add c-password-field)\n      (.add update-btn)\n      (.add delete-btn)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        c-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 15)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :password)))\n        c-password-field (doto (new JTextField)\n                           (.setColumns 15))\n        update-btn (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText c-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText c-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-btn (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))]\n    (doto dialog\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        username-field)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    #_(doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.add id-field)\n      (.add username-label)\n      (.add username-field)\n      (.add password-label)\n      (.add password-field)\n      (.add c-password-label)\n      (.add c-password-field)\n      (.add update-btn)\n      (.add delete-btn)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        c-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 15)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :password)))\n        c-password-field (doto (new JTextField)\n                           (.setColumns 15))\n        update-btn (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText c-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText c-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-btn (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))]\n   #_ (doto dialog\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        username-field)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.add id-field)\n      (.add username-label)\n      (.add username-field)\n      (.add password-label)\n      (.add password-field)\n      (.add c-password-label)\n      (.add c-password-field)\n      (.add update-btn)\n      (.add delete-btn)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        confirm-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 15)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :password)))\n        confirm-password-field (doto (new JTextField)\n                           (.setColumns 15))\n        update-button (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText confirm-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText confirm-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-button (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))\n        exit-button (doto (new JButton \&quot;Exit\&quot;)\n                        (.addActionListener\n                          (proxy [AbstractAction] []\n                            (actionPerformed [evt]\n                              (log/info \&quot;exit\&quot;)\n                              (.dispose dialog)))))]\n   (doto dialog\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        id-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        id-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 1, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 1,:anchor :LINE_END\n        username-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 2, :anchor :LINE_START\n        password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 2,:anchor :LINE_END\n        password-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 3, :anchor :LINE_START\n        confirm-password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 3,:anchor :LINE_END\n        confirm-password-field\n        :gridx 1, :gridy 4\n        update-button\n        :gridx 1, :gridy 5\n        delete-button\n        :gridx 1, :gridy 6\n        exit-button)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    #_(doto dialog\n      (.setLayout (new GridLayout 5 2 1 1))\n      (.add id-label)\n      (.add id-field)\n      (.add username-label)\n      (.add username-field)\n      (.add password-label)\n      (.add password-field)\n      (.add c-password-label)\n      (.add c-password-field)\n      (.add update-btn)\n      (.add delete-btn)\n      (.pack)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-table []\n  \&quot;This table shows all the administrators\n  for the system\&quot;\n  (def rows (db/list-admin))\n  (. SwingUtilities invokeLater\n     (fn []\n       (doto (JFrame. \&quot;demo\&quot;)\n         (.setDefaultCloseOperation (. JFrame HIDE_ON_CLOSE))\n         (.setContentPane\n           (doto (JPanel. (GridLayout. 1 0))\n             (.setOpaque true)\n             (.add (JScrollPane.\n                     (doto utl/table\n                       (.setModel (utl/model rows\n                                         (vec (map str (keys (first rows))))\n                                         (fn [r c] ((nth rows r) (nth (keys (first rows)) c)))))\n                       (.setPreferredScrollableViewportSize\n                         (Dimension. 800 300))\n                       (.setFillsViewportHeight true))))))\n         (.pack)\n         (.setLocationRelativeTo nil)\n         (.setVisible true)))))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        confirm-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 15)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 15)\n                         (.setText (@data-ref :password)))\n        confirm-password-field (doto (new JTextField)\n                           (.setColumns 15))\n        update-button (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText confirm-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText confirm-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-button (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))\n        exit-button (doto (new JButton \&quot;Exit\&quot;)\n                        (.addActionListener\n                          (proxy [AbstractAction] []\n                            (actionPerformed [evt]\n                              (log/info \&quot;exit\&quot;)\n                              (.dispose dialog)))))]\n   (doto dialog\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        id-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        id-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 1, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 1,:anchor :LINE_END\n        username-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 2, :anchor :LINE_START\n        password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 2,:anchor :LINE_END\n        password-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 3, :anchor :LINE_START\n        confirm-password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 3,:anchor :LINE_END\n        confirm-password-field\n        :gridx 1, :gridy 4\n        update-button\n        :gridx 1, :gridy 5\n        delete-button\n        :gridx 1, :gridy 6\n        exit-button)\n      (.setSize 500 200)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn- admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        confirm-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 25)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 25)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 25)\n                         (.setText (@data-ref :password)))\n        confirm-password-field (doto (new JTextField)\n                           (.setColumns 25))\n        update-button (doto (new JButton \&quot;Update\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText confirm-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText confirm-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-button (doto (new JButton \&quot;Delete\&quot;)\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))\n        exit-button (doto (new JButton \&quot;Exit\&quot;)\n                        (.addActionListener\n                          (proxy [AbstractAction] []\n                            (actionPerformed [evt]\n                              (log/info \&quot;exit\&quot;)\n                              (.dispose dialog)))))]\n   (doto dialog\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        id-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        id-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 1, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 1,:anchor :LINE_END\n        username-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 2, :anchor :LINE_START\n        password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 2,:anchor :LINE_END\n        password-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 3, :anchor :LINE_START\n        confirm-password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 3,:anchor :LINE_END\n        confirm-password-field\n        :gridx 1, :gridy 4\n        update-button\n        :gridx 1, :gridy 5\n        delete-button\n        :gridx 1, :gridy 6\n        exit-button)\n      (.setSize 500 200)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn admin-dialog [data-ref]\n  (let [dialog (new JDialog (@data-ref :owner) true)\n        id-label (doto (new JLabel \&quot;ID: \&quot;))\n        username-label (doto (new JLabel \&quot;Username: \&quot;))\n        password-label (doto (new JLabel \&quot;Password: \&quot;))\n        confirm-password-label (doto (new JLabel \&quot;Confirm password: \&quot;))\n        id-field (doto (new JTextField)\n                   (.setColumns 25)\n                   (.setText (@data-ref :id))\n                   (.setEditable false))\n        username-field (doto (new JTextField)\n                         (.setColumns 25)\n                         (.setText (@data-ref :username))\n                         (.setEditable false))\n        password-field (doto (new JTextField)\n                         (.setColumns 25)\n                         (.setText (@data-ref :password)))\n        confirm-password-field (doto (new JTextField)\n                           (.setColumns 25))\n        update-button (doto (new JButton \&quot;Update\&quot;)\n                        (.setPreferredSize (new Dimension 70 20))\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Updating admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (if (or (empty? (.getText password-field))(empty? (.getText confirm-password-field)))\n                             (JOptionPane/showMessageDialog\n                               nil \&quot;Please enter all fields!\&quot; \&quot;Fields\&quot;\n                               JOptionPane/ERROR_MESSAGE)\n                             (do\n                               (if (not (= (.getText password-field)(.getText confirm-password-field)))\n                                 (JOptionPane/showMessageDialog\n                                   nil \&quot;Passwords are not the same\&quot; \&quot;Credentials\&quot;\n                                   JOptionPane/INFORMATION_MESSAGE)\n                                 (do\n                                   (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to update?\&quot;, \&quot;Confirm Update Operation\&quot;,\n                                                                               JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                                     (if (= result JOptionPane/YES_OPTION)\n                                       (if (= (db/update-admin (.getText password-field) (@data-ref :id)) (list 1))\n                                         (do\n                                           (log/infof \&quot;[%s]Successfully update \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Successfully updated!\&quot; (@data-ref :username))  \&quot;update Sussessful\&quot;\n                                             JOptionPane/INFORMATION_MESSAGE))\n                                         (do\n                                           (log/infof \&quot;[%s]Failed updating \&quot; (@data-ref :username))\n                                           (JOptionPane/showMessageDialog\n                                             nil (str \&quot;Failed updating!\&quot; (@data-ref :username))  \&quot;update Failed\&quot;\n                                             JOptionPane/ERROR_MESSAGE)))))))))\n                           (.dispose dialog)))))\n        delete-button (doto (new JButton \&quot;Delete\&quot;)\n                        (.setPreferredSize (new Dimension 70 20))\n                     (.addActionListener\n                       (proxy [AbstractAction] []\n                         (actionPerformed [evt]\n                           (log/infof \&quot;Deleting admin: [%s][%s]\&quot;(@data-ref :username)(@data-ref :id))\n                           (let [result (JOptionPane/showConfirmDialog nil, \&quot;Are you sure you want to delete?\&quot;, \&quot;Confirm Delete Operation\&quot;,\n                                                                       JOptionPane/YES_NO_OPTION, JOptionPane/QUESTION_MESSAGE)]\n                             (if (= result JOptionPane/YES_OPTION)\n                               (if (= (db/delete-admin (@data-ref :id)) (list 1))\n                                 (do\n                                   (log/infof \&quot;[%s]Successfully deleted \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Successfully deleted!\&quot; (@data-ref :username))  \&quot;Deletion Sussessful\&quot;\n                                     JOptionPane/INFORMATION_MESSAGE))\n                                 (do\n                                   (log/infof \&quot;[%s]Failed deleting \&quot; (@data-ref :username))\n                                   (JOptionPane/showMessageDialog\n                                     nil (str \&quot;Failed deleting!\&quot; (@data-ref :username))  \&quot;Deletion Failed\&quot;\n                                     JOptionPane/ERROR_MESSAGE)))))\n                           (.dispose dialog)))))\n        exit-button (doto (new JButton \&quot;Exit\&quot;)\n                      (.setPreferredSize (new Dimension 70 20))\n                        (.addActionListener\n                          (proxy [AbstractAction] []\n                            (actionPerformed [evt]\n                              (log/info \&quot;exit\&quot;)\n                              (.dispose dialog)))))]\n   (doto dialog\n      (.setLayout (new GridBagLayout))\n      ; style the components\n      (utl/grid-bag-layout\n        :fill :BOTH, :insets (Insets. 5 1 1 5)\n        :gridx 0, :gridy 0, :anchor :LINE_START\n        id-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 0,:anchor :LINE_END\n        id-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 1, :anchor :LINE_START\n        username-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 1,:anchor :LINE_END\n        username-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 2, :anchor :LINE_START\n        password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 2,:anchor :LINE_END\n        password-field\n        :fill :HORIZONTAL, :insets (Insets. 2 2 2 2)\n        :gridx 0, :gridy 3, :anchor :LINE_START\n        confirm-password-label\n        :fill :HORIZONTAL, :insets (Insets. 1 1 1 1)\n        :gridx 1, :gridy 3,:anchor :LINE_END\n        confirm-password-field\n        :gridx 1, :gridy 4\n        update-button\n        :gridx 1, :gridy 5\n        delete-button\n        :gridx 1, :gridy 6\n        exit-button)\n      (.setSize 500 200)\n      (.setLocationRelativeTo nil)\n      (.setVisible true))\n    (@data-ref :username)))&quot; &quot;(defn dialog-string [owner id username password]\n  (admin-dialog (ref {:owner owner :id id :username username :password password})))&quot; &quot;(.addMouseListener utl/table\n                   (proxy [MouseAdapter] []\n                     (mouseClicked [e]\n                       (when (== (.getClickCount e) 1)\n                         (let [coordinates (.getPoint e)\n                               row-count (.rowAtPoint utl/table coordinates)\n                               column-count (.columnAtPoint utl/table coordinates)]\n                           (prn \&quot;click r &gt; \&quot; row-count)\n                           (prn \&quot;click c &gt; \&quot; column-count)\n                           (prn \&quot;ID &gt; \&quot; (:username(nth (db/list-admin)row-count)))\n                           (let [id (:id(nth (db/list-admin)row-count))\n                                 username (:username(nth (db/list-admin)row-count))\n                                 password (:password(nth (db/list-admin)row-count))]\n                             (dialog-string nil (str id) username password))\n                           (flush))))))&quot; &quot;(defn admin-table []\n  \&quot;This table shows all the administrators\n  for the system\&quot;\n  (def rows (db/list-admin))\n  (. SwingUtilities invokeLater\n     (fn []\n       (doto (JFrame. \&quot;demo\&quot;)\n         (.setDefaultCloseOperation (. JFrame HIDE_ON_CLOSE))\n         (.setContentPane\n           (doto (JPanel. (GridLayout. 1 0))\n             (.setOpaque true)\n             (.add (JScrollPane.\n                     (doto utl/table\n                       (.setModel (utl/model rows\n                                         (name (vec (map str (keys (first rows)))))\n                                         (fn [r c] ((nth rows r) (nth (keys (first rows)) c)))))\n                       (.setPreferredScrollableViewportSize\n                         (Dimension. 800 300))\n                       (.setFillsViewportHeight true))))))\n         (.setSize 1000 300)\n         (.setLocationRelativeTo nil)\n         (.setVisible true)))))&quot; &quot;(str :r)&quot; &quot;(name :r)&quot; &quot;(name (str :r))&quot; &quot;(keyword \&quot;:s\&quot;)&quot; &quot;(symbol \&quot;:s\&quot;)&quot; &quot;(name (symbol \&quot;:s\&quot;))&quot; &quot;(symbol (.substring (str :produce/onions) 1))&quot; &quot;(symbol (.substring (str :produce/onions) 0))&quot; &quot;(symbol (.substring (str :produce/onions) 2))&quot; &quot;(.substring \&quot;:s\&quot; 1)&quot; &quot;(ns layout.admin\n  (:import (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField\n                        JButton JOptionPane BorderFactory AbstractAction\n                        JOptionPane JScrollPane SwingUtilities)\n           (java.awt.event ActionListener ItemListener MouseAdapter)\n           (java.awt GridBagLayout Insets GridLayout Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(defn admin-table []\n  \&quot;This table shows all the administrators\n  for the system\&quot;\n  (def rows (db/list-admin))\n  (. SwingUtilities invokeLater\n     (fn []\n       (doto (JFrame. \&quot;demo\&quot;)\n         (.setDefaultCloseOperation (. JFrame HIDE_ON_CLOSE))\n         (.setContentPane\n           (doto (JPanel. (GridLayout. 1 0))\n             (.setOpaque true)\n             (.add (JScrollPane.\n                     (doto utl/table\n                       (.setModel (utl/model rows\n                                         (vec (map str (keys (first rows))))\n                                         (fn [r c] ((nth rows r) (nth (keys (first rows)) c)))))\n                       (.setPreferredScrollableViewportSize\n                         (Dimension. 800 300))\n                       (.setFillsViewportHeight true))))))\n         (.setSize 1000 300)\n         (.setLocationRelativeTo nil)\n         (.setVisible true)))))&quot; &quot;(admin-table)&quot; &quot;(ns model.db\n  (:import (java.sql SQLException))\n  (:require [clojure.java.jdbc :as sql])\n  (:require [clojure.tools.logging :as log])\n  (:require [clojure.java.io :as io])\n  (:require [util.utils :as utl]))&quot; &quot;(def db\n  \&quot;Database configurations\&quot;\n  (let [classname (utl/get-configuration :classname)\n        subprotocol (utl/get-configuration :subprotocol)\n        subname (utl/get-configuration :subname)\n        user (utl/get-configuration :user)\n        password (utl/get-configuration :password)]\n    {:classname classname\n     :subprotocol subprotocol\n     :subname subname\n     :user user\n     :password password}))&quot; &quot;(defn insert-login-logs\n  \&quot;Function inserts login logs to db\&quot;\n  [username]\n  (try\n    (let [sql \&quot;insert into inventoryapp.tbl_login_logs (username,login_time) values (? , NOW())\&quot;]\n      (sql/with-connection db\n        (sql/do-prepared sql [username])))\n    (catch SQLException sql\n      (log/error \&quot;insert login logs SQLE &gt;&gt; \&quot; (.getMessage sql)))\n    (catch Exception e\n      (log/error \&quot;insert login logs E &gt;&gt; \&quot; (.getMessage e)))))&quot; &quot;(insert-login-logs \&quot;joe\&quot;)&quot; &quot;(defn insert-audit-logs\n  \&quot;Function inserts audit logs to db\&quot;\n  [username action description]\n  (try\n    (let [sql \&quot;insert into inventoryapp.tbl_audit_logs (username,action,description,operation_time) values (? , ? , ? ,  NOW())\&quot;]\n      (sql/with-connection db\n        (sql/do-prepared sql [username action description])))\n    (catch SQLException sql\n      (log/error \&quot;insert audit logs SQLE &gt;&gt; \&quot; (.getMessage sql)))\n    (catch Exception e\n      (log/error \&quot;insert audit logs E &gt;&gt; \&quot; (.getMessage e)))))&quot; &quot;(insert-audit-logs \&quot;joe\&quot; \&quot;add admin\&quot; \&quot;successfull\&quot;)&quot; &quot;(defn login [^String username ^String password]\n  (sql/with-connection db\n     (sql/with-query-results rs [\&quot;select * from login where username=? and password=?\&quot; username password]\n       (dorun (map #(println %) rs))\n         (count rs))))&quot; &quot;(login \&quot;admin\&quot; \&quot;admin\&quot;)&quot; &quot;(def login-frame\n  (doto (JFrame. \&quot;INFINITE INVENTORY SYSTEM\&quot;)\n    ; set login panel to frame\n    (.setContentPane login-panel)\n    ; set size of frame\n    (.setSize 800 300)\n    ; make frame visible\n    (.setVisible true)\n    ; position frame at center of screen\n    (.setLocationRelativeTo nil)))&quot; &quot;(def try (atom \&quot;\&quot;))&quot; &quot;try&quot; &quot;(reset! try \&quot;joe\&quot;)&quot; &quot;@try&quot;], :remote []}}</component>
</project>

