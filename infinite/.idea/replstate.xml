<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1420639069596">{:repl-history {:ide [], :local [&quot;(.addMouseListener utl/table\n                   (proxy [MouseAdapter] []\n                     (mouseClicked [e]\n                       (when (== (.getClickCount e) 1)\n                         (let [coordinates (.getPoint e)\n                               row-count (.rowAtPoint utl/table coordinates)\n                               column-count (.columnAtPoint utl/table coordinates)]\n                           (prn \&quot;click r &gt; \&quot; row-count)\n                           (prn \&quot;click c &gt; \&quot; column-count)\n                           (prn \&quot;ID &gt; \&quot; (:username(nth (db/list-admin)row-count)))\n                           (let [id (:id(nth (db/list-admin)row-count))\n                                 username (:username(nth (db/list-admin)row-count))\n                                 password (:password(nth (db/list-admin)row-count))]\n                             (dialog-string nil (str id) username password))\n                           (flush))))))&quot; &quot;(defn admin-table []\n  \&quot;This table shows all the administrators\n  for the system\&quot;\n  (def rows (db/list-admin))\n  (. SwingUtilities invokeLater\n     (fn []\n       (doto (JFrame. \&quot;demo\&quot;)\n         (.setDefaultCloseOperation (. JFrame HIDE_ON_CLOSE))\n         (.setContentPane\n           (doto (JPanel. (GridLayout. 1 0))\n             (.setOpaque true)\n             (.add (JScrollPane.\n                     (doto utl/table\n                       (.setModel (utl/model rows\n                                         (name (vec (map str (keys (first rows)))))\n                                         (fn [r c] ((nth rows r) (nth (keys (first rows)) c)))))\n                       (.setPreferredScrollableViewportSize\n                         (Dimension. 800 300))\n                       (.setFillsViewportHeight true))))))\n         (.setSize 1000 300)\n         (.setLocationRelativeTo nil)\n         (.setVisible true)))))&quot; &quot;(str :r)&quot; &quot;(name :r)&quot; &quot;(name (str :r))&quot; &quot;(keyword \&quot;:s\&quot;)&quot; &quot;(symbol \&quot;:s\&quot;)&quot; &quot;(name (symbol \&quot;:s\&quot;))&quot; &quot;(symbol (.substring (str :produce/onions) 1))&quot; &quot;(symbol (.substring (str :produce/onions) 0))&quot; &quot;(symbol (.substring (str :produce/onions) 2))&quot; &quot;(.substring \&quot;:s\&quot; 1)&quot; &quot;(ns layout.admin\n  (:import (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField\n                        JButton JOptionPane BorderFactory AbstractAction\n                        JOptionPane JScrollPane SwingUtilities)\n           (java.awt.event ActionListener ItemListener MouseAdapter)\n           (java.awt GridBagLayout Insets GridLayout Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(defn admin-table []\n  \&quot;This table shows all the administrators\n  for the system\&quot;\n  (def rows (db/list-admin))\n  (. SwingUtilities invokeLater\n     (fn []\n       (doto (JFrame. \&quot;demo\&quot;)\n         (.setDefaultCloseOperation (. JFrame HIDE_ON_CLOSE))\n         (.setContentPane\n           (doto (JPanel. (GridLayout. 1 0))\n             (.setOpaque true)\n             (.add (JScrollPane.\n                     (doto utl/table\n                       (.setModel (utl/model rows\n                                         (vec (map str (keys (first rows))))\n                                         (fn [r c] ((nth rows r) (nth (keys (first rows)) c)))))\n                       (.setPreferredScrollableViewportSize\n                         (Dimension. 800 300))\n                       (.setFillsViewportHeight true))))))\n         (.setSize 1000 300)\n         (.setLocationRelativeTo nil)\n         (.setVisible true)))))&quot; &quot;(admin-table)&quot; &quot;(defn insert-login-logs\n  \&quot;Function inserts login logs to db\&quot;\n  [username]\n  (try\n    (let [sql \&quot;insert into inventoryapp.tbl_login_logs (username,login_time) values (? , NOW())\&quot;]\n      (sql/with-connection db\n        (sql/do-prepared sql [username])))\n    (catch SQLException sql\n      (log/error \&quot;insert login logs SQLE &gt;&gt; \&quot; (.getMessage sql)))\n    (catch Exception e\n      (log/error \&quot;insert login logs E &gt;&gt; \&quot; (.getMessage e)))))&quot; &quot;(insert-login-logs \&quot;joe\&quot;)&quot; &quot;(defn insert-audit-logs\n  \&quot;Function inserts audit logs to db\&quot;\n  [username action description]\n  (try\n    (let [sql \&quot;insert into inventoryapp.tbl_audit_logs (username,action,description,operation_time) values (? , ? , ? ,  NOW())\&quot;]\n      (sql/with-connection db\n        (sql/do-prepared sql [username action description])))\n    (catch SQLException sql\n      (log/error \&quot;insert audit logs SQLE &gt;&gt; \&quot; (.getMessage sql)))\n    (catch Exception e\n      (log/error \&quot;insert audit logs E &gt;&gt; \&quot; (.getMessage e)))))&quot; &quot;(insert-audit-logs \&quot;joe\&quot; \&quot;add admin\&quot; \&quot;successfull\&quot;)&quot; &quot;(defn login [^String username ^String password]\n  (sql/with-connection db\n     (sql/with-query-results rs [\&quot;select * from login where username=? and password=?\&quot; username password]\n       (dorun (map #(println %) rs))\n         (count rs))))&quot; &quot;(login \&quot;admin\&quot; \&quot;admin\&quot;)&quot; &quot;(def login-frame\n  (doto (JFrame. \&quot;INFINITE INVENTORY SYSTEM\&quot;)\n    ; set login panel to frame\n    (.setContentPane login-panel)\n    ; set size of frame\n    (.setSize 800 300)\n    ; make frame visible\n    (.setVisible true)\n    ; position frame at center of screen\n    (.setLocationRelativeTo nil)))&quot; &quot;(def try (atom \&quot;\&quot;))&quot; &quot;try&quot; &quot;(reset! try \&quot;joe\&quot;)&quot; &quot;(defn admin-exists?\n  \&quot;Function deletes an admin\&quot;\n  [username]\n  (log/infof \&quot;[check-admin] function exec\&quot; username )\n  (try\n    (let [sql \&quot;select from tbl_login where username = ?\&quot;]\n      (sql/with-connection db\n         (sql/do-prepared sql [username])))\n    (catch SQLException e\n      (log/errorf \&quot;SQLException delete-admin [%s]\&quot; e))\n    (catch Exception e\n      (log/errorf \&quot;Exception delete-admin [%s]\&quot; e))))&quot; &quot;(defn admin-exists?\n  [username]\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [(format \&quot;select * from tbl_login where username = '%s'\&quot; username)]      ; execute query\n    (log/info rows )rows)))&quot; &quot;(defn admin-exists?\n  [username]\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [(format \&quot;select * from tbl_login where username = '%s'\&quot; username)]      ; execute query\n    (doall rows ))))&quot; &quot;(admin-exists? \&quot;abala\&quot;)&quot; &quot;(admin-exists? \&quot;abalab\&quot;)&quot; &quot;(if (admin-exists? \&quot;abalab\&quot;)1 0)&quot; &quot;(if (admin-exists? \&quot;abala\&quot;)1 0)&quot; &quot;(if (admin-exists? \&quot;abalan\&quot;)1 0)&quot; &quot;(if (not (admin-exists? \&quot;abalan\&quot;)) 1 0)&quot; &quot;(if (not (admin-exists? \&quot;abala\&quot;)) 1 0)&quot; &quot;-----------------------&quot; &quot;(defn get-liqours []\n  (reset! liquor-atom [])\n  (sql/with-connection db\n   (sql/with-query-results rs [\&quot;select name from tbl_liquor\&quot;]\n      rs)))&quot; &quot;(defn get-liqours []\n  (reset! liquor-atom [])\n  (sql/with-connection db\n   (sql/with-query-results rs [\&quot;select name from tbl_liquor\&quot;]\n      (doall rs))))&quot; &quot;(defn get-liqours []\n  (reset! liquor-atom [])\n  (sql/with-connection db\n                       (sql/with-query-results rs [\&quot;select name from tbl_liquor\&quot;]\n                                               #_(dorun\n                                               #_ (map #(println %)rs))\n                                               ;(println (:name(second rs)))\n                                               (loop [x (count rs)]\n                                                 (when (not (= x 0))\n                                                   ; (println  \&quot;main -&gt; \&quot; (:name(nth rs (- x 1))))\n                                                   (swap! liquor-atom conj (:name(nth rs (- x 1))))\n                                                   (recur (dec x))))\n                                               (count rs)\n                                               @liquor-atom )))&quot; &quot;(get-liqours)&quot; &quot;(defn list-admin []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [\&quot;select * from tbl_login\&quot;]      ; execute query\n    (log/info rows )rows)))&quot; &quot;(ns layout.inventory\n  (:import (javax.swing JFrame JLabel JDialog JPanel JTextField\n                        JButton JOptionPane BorderFactory AbstractAction\n                        JOptionPane JComboBox)\n           (java.awt.event ActionListener MouseAdapter)\n           (java.awt GridBagLayout Insets Dimension)\n           (java.sql SQLException))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]\n            [util.utils :as utl]))&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(db/list-inventory)&quot; &quot;(db/list-admin)&quot; &quot;(doc conj)&quot; &quot;user&quot; &quot;(defn list-admin []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [\&quot;select * from tbl_login\&quot;]      ; execute query\n    (doall rows ))))&quot; &quot;(defn list-inventory []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [\&quot;select * from tbl_inventory\&quot;]      ; execute query\n    (doall rows))))&quot; &quot;(list-admin)&quot; &quot;(list-inventory)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n    (sql/with-query-results rows [\&quot;select * from tbl_sales where dayofweek(date_added)=3 and liquor='henessy'\&quot;]      ; execute query\n     (doall rows ))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n    (sql/with-query-results rows [\&quot;select count(*) from tbl_sales where dayofweek(date_added)=3 and liquor='henessy'\&quot;]      ; execute query\n     (doall rows ))))&quot; &quot;(loop [x 8]\n  (println x)\n  (dec 1))&quot; &quot;(loop [x 10]\n  (when (&gt; x 1)\n    (println x)\n    (recur (- x 2))))&quot; &quot;(loop [x 7]\n  (when (&gt; x 1)\n    (println x)\n    (recur (- x 1))))&quot; &quot;(loop [x 7]\n  (when (&gt; x 0)\n    (println x)\n    (recur (- x 1))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 10]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 10]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println rows))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 10]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; rows))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; rows))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (nth rows 1)))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (nth rows 0)))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (:count(*) (nth rows 0))))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (val (nth rows 0))))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (vals (nth rows 0))))\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (into [] (vals (nth rows 0)))))\n      (recur (- x 1))))))&quot; &quot;(def try (atom []))&quot; &quot;@try&quot; &quot;(swap! conj try 1)&quot; &quot;(swap! try conj 1)&quot; &quot;(swap! try conj 2)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (swap! henessy conj (vals (nth rows 0)))))\n      (recur (- x 1))))))&quot; &quot;(ns model.db\n  (:import (java.sql SQLException))\n  (:require [clojure.java.jdbc :as sql])\n  (:require [clojure.tools.logging :as log])\n  (:require [clojure.java.io :as io])\n  (:require [util.utils :as utl]))&quot; &quot;(def db\n  \&quot;Database configurations\&quot;\n  (let [classname (utl/get-configuration :classname)\n        subprotocol (utl/get-configuration :subprotocol)\n        subname (utl/get-configuration :subname)\n        user (utl/get-configuration :user)\n        password (utl/get-configuration :password)]\n    {:classname classname\n     :subprotocol subprotocol\n     :subname subname\n     :user user\n     :password password}))&quot; &quot;(def hennessy (atom []))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows ) (println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0)))))\n      (recur (- x 1))))))&quot; &quot;(def try2 (list 5))&quot; &quot;try2&quot; &quot;(get try2 0)&quot; &quot;(get try2 1)&quot; &quot;(nth try2 0)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (nth (vals (nth rows 0)) 0))\n      )\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0)) )\n      )\n      (recur (- x 1))))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      hennessy))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (dec 1)\n      ))))&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (dec x)\n      ))))&quot; &quot;(def try3 8)&quot; &quot;(dec 8)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))hennessy)&quot; &quot;(reset! hennessy [])&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! henessy [])\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! hennessy [])\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(def vodka [11 21 31 41 51 61 71])&quot; &quot;vodka&quot; &quot;(defn get-henessy []\n  \&quot;Function display system admin\&quot;\n  (reset! hennessy [])                                      ; reset hennesy to empty vector everytime you call function\n  (sql/with-connection db\n   (loop [x 7]\n    (when (&gt; x 0)\n     (sql/with-query-results rows [(format  \&quot;select count(*) from tbl_sales where dayofweek(date_added)=%d and liquor='henessy'\&quot; x)]      ; execute query\n      (doall rows )\n      ;(println x \&quot;-\&quot; (swap! hennessy conj (vals (nth rows 0))))\n      (println x \&quot;-\&quot; (swap! hennessy conj(nth (vals (nth rows 0)) 0))))\n      (recur (- x 1))\n      )))@hennessy)&quot; &quot;(get-henessy)&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot; &quot;(db/get-henessy)&quot; &quot;(ns infinite.main\n  (:import (javax.swing JFrame JMenu JMenuBar JMenuItem JTable BorderFactory JPanel)\n           (java.awt.event ActionListener KeyEvent MouseListener)\n           (org.jfree.chart ChartPanel))\n  (:require [clojure.tools.logging :as log]\n            [layout.admin :as admin]\n            [layout.sales :as sales]\n            [layout.help :as help]\n            [util.utils :as utl]\n            [model.db :as db])\n  (:use [incanter core charts pdf stats io datasets]))&quot;], :remote []}}</component>
</project>

