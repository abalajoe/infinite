<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1418854645355">{:repl-history {:ide [], :local [&quot;(ns model.db\n  (:import (java.sql SQLException))\n  (:require [clojure.java.jdbc :as sql])\n  (:require [clojure.tools.logging :as log])\n  (:require [clojure.java.io :as io])\n  (:require [util.utils :as utl]))&quot; &quot;(def db\n  \&quot;Database configurations\&quot;\n  (let [classname (utl/get-configuration :classname)\n        subprotocol (utl/get-configuration :subprotocol)\n        subname (utl/get-configuration :subname)\n        user (utl/get-configuration :user)\n        password (utl/get-configuration :password)]\n    {:classname classname\n     :subprotocol subprotocol\n     :subname subname\n     :user user\n     :password password}))&quot; &quot;(defn list-admin []\n  \&quot;Function display system admin\&quot;\n  (sql/with-connection db                                   ; open db connection\n   (sql/with-query-results rows [\&quot;select * from login\&quot;]      ; execute query\n    (log/info rows )rows)))&quot; &quot;(list-admin)&quot; &quot;(ns infinite.core\n  (:import (javax.swing JOptionPane)\n           (javax.swing JFrame JLabel JDialog JPanel JComboBox JTextField JButton JOptionPane)\n           (java.awt.event ActionListener ItemListener)\n           (java.awt GridLayout)\n           (java.awt Dimension))\n  (:require [clojure.tools.logging :as log]\n            [model.db :as db]))&quot; &quot;(def frame)&quot; &quot;(def username-label (new JLabel \&quot;username\&quot;))&quot; &quot;(def password-label (new JLabel \&quot;password\&quot;))&quot; &quot;(def username-field (doto (new JTextField)(.setColumns 5)))&quot; &quot;(def password-field (new JTextField))&quot; &quot;(def login-button (new JButton \&quot;Login\&quot;))&quot; &quot;(def change-password-button (new JButton \&quot;Password\&quot;))&quot; &quot;(def exit-button (new JButton \&quot;Exit\&quot;))&quot; &quot;(def combox\n  (let [combobox (JComboBox. (java.util.Vector. ['a 'b 'c]))]\n    (.addItemListener combobox\n                      (proxy [ItemListener] []\n                        (itemStateChanged [item-event]\n                          (println (str \&quot;selection changed to \&quot;\n                                        (.getSelectedItem combobox))))))))&quot; &quot;(def combo-values [\&quot;joe\&quot; \&quot;abala\&quot;])&quot; &quot;(. login-button addActionListener\n   (proxy [ActionListener] []\n     (actionPerformed [e]\n       (log/info \&quot;Login Button Pressed\&quot;)\n       ; get username and password entered by user\n       (let [username (. username-field (getText)) password (. password-field (getText))]\n         ; check if the user enters all fields\n         (if (or (empty? username)(empty? password))\n           (JOptionPane/showMessageDialog\n             nil \&quot;Please enter all details!\&quot; \&quot;Enter all Fields\&quot;\n             JOptionPane/INFORMATION_MESSAGE)\n           (do\n             ; check if the credentials are correct\n             (if (= (db/login username password ) 1)\n               (do\n                 ; close current jframe\n                 (.dispose frame)\n                 ; open main frame\n                 ; (mn/call-frame)\n                 (log/info \&quot;success\&quot;)\n                 )\n               (do (log/info \&quot;credentials incorrect!!\&quot;)\n                   (JOptionPane/showMessageDialog\n                     nil \&quot;Incorrect Credentials!\&quot; \&quot;Login usuccessful\&quot;\n                     JOptionPane/ERROR_MESSAGE)))))))))&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>

